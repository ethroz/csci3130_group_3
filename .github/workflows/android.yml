name: Run connected tests

on:
  workflow_dispatch:
    inputs:
      commit:
        description: 'The unique hash of the commit'
        required: true
      proj_id:
        description: 'The ID of the project'
        required: true
      job_id:
        description: 'The ID of the job'
        required: true

run-name: ${{ github.event.inputs.commit }}

jobs:
  ConnectedTests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api-level: [28, 30, 32, 34]
    steps:
      - name: Setup
        env:
          COMMIT: ${{ github.event.inputs.commit }}
          PROJECT_ID: ${{ github.event.inputs.proj_id }}
          JOB_ID: ${{ github.event.inputs.job_id }}
          DOMAIN: ${{ secrets.DOMAIN }}
          OWNER: ${{ secrets.OWNER }}
          PROJECT: ${{ secrets.PROJECT }}
          USER: ${{ secrets.USER }}
          TOKEN: ${{ secrets.TOKEN }}
        run: |
          git clone "https://$USER:$TOKEN@$DOMAIN/$OWNER/$PROJECT.git"
          cd $PROJECT
          git checkout $COMMIT
          chmod +x ./gradlew
          curl -s -o artifacts.zip -L -H "PRIVATE-TOKEN: $TOKEN" "https://$DOMAIN/api/v4/projects/$PROJECT_ID/jobs/$JOB_ID/artifacts"
          unzip artifacts.zip

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set Arch
        id: set_arch
        run: |
          if [ "${{ matrix.api-level }}" -gt 30 ]; then
            echo "::set-output name=arch::x86_64"
          else
            echo "::set-output name=arch::x86"
          fi

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: google_apis
          arch: ${{ steps.set_arch.outputs.arch }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Run connected tests
        uses: ReactiveCircus/android-emulator-runner@v2
        env:
          PROJECT: ${{ secrets.PROJECT }}
        with:
          api-level: ${{ matrix.api-level }}
          target: google_apis
          arch: ${{ steps.set_arch.outputs.arch }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            cd $PROJECT
            adb logcat *:S TestRunner:V -T 1 & LOGCAT_PID=$!
            ./gradlew :app:connectedDebugAndroidTest
            if [ -n "$LOGCAT_PID" ] ; then kill $LOGCAT_PID; fi

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: testResultsAPI${{ matrix.api-level }}
          path: app/build/reports/androidTests/connected/debug
